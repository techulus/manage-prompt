generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  rawData       Json?
  settings      Json?

  organizations      Organization[]
  Workflow           Workflow[]
  WorkflowRun        WorkflowRun[]
  OrganizationToUser OrganizationToUser[]
  SecretKey          SecretKey[]
  sessions           Session[]
  ChatBot            ChatBot[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  passkeys  Passkey[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique @map("sessionToken")
  expiresAt DateTime @map("expires")
  ipAddress String?
  userAgent String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id                 String               @id
  name               String
  image_url          String?
  logo_url           String?
  rawData            Json?
  credits            Int                  @default(0)
  createdByUser      String
  createdBy          User                 @relation(fields: [createdByUser], references: [id], onDelete: Cascade)
  stripe             Stripe?
  spendLimit         Int?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  workflows          Workflow[]
  OrganizationToUser OrganizationToUser[]
  SecretKey          SecretKey[]
  UserKeys           UserKey[]
  ChatBot            ChatBot[]
}

model OrganizationToUser {
  id             Int          @id @default(autoincrement())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Stripe {
  id             Int          @id @default(autoincrement())
  customerId     String       @unique
  subscriptionId String?      @unique
  subscription   Json?
  ownerId        String       @unique
  organization   Organization @relation(fields: [ownerId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model SecretKey {
  id                 Int       @id @default(autoincrement())
  name               String?
  key                String    @unique
  rateLimitPerSecond Int       @default(10)
  createdBy          String
  ownerId            String
  lastUsed           DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user         User         @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model UserKey {
  id        String   @id
  provider  String
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ownerId   String

  organization Organization @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Workflow {
  id              Int     @id @default(autoincrement())
  shortId         String  @unique
  name            String
  published       Boolean @default(false)
  cacheControlTtl Int?
  model           String
  modelSettings   Json?
  template        String
  instruction     String?
  inputs          Json

  ownerId      String
  organization Organization @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  createdBy String
  user      User   @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  runs     WorkflowRun[]
  branches WorkflowBranch[]
  tests    WorkflowTest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
}

model WorkflowBranch {
  id            Int     @id @default(autoincrement())
  shortId       String
  model         String
  modelSettings Json?
  template      String
  instruction   String?
  status        String  @default("open")

  workflowId Int
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([shortId, workflowId])
}

model WorkflowTest {
  id        Int      @id @default(autoincrement())
  input     Json
  output    String
  condition String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @default("pending")

  workflowId Int
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  workflowRunId Int?
  workflowRun   WorkflowRun? @relation(fields: [workflowRunId], references: [id], onDelete: SetNull)
}

model WorkflowRun {
  id              Int      @id @default(autoincrement())
  workflow        Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId      Int
  result          String
  rawRequest      Json?
  rawResult       Json?
  totalTokenCount Int      @default(0)
  branchId        String?
  createdBy       String?
  user            User?    @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  WorkflowTest WorkflowTest[]
}

model ChatBot {
  id                 String               @id @default(cuid())
  name               String
  createdBy          String
  ownerId            String
  model              String
  modelSettings      Json?
  contextItems       Json
  organization       Organization         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  user               User                 @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ChatBotUserSession ChatBotUserSession[]
}

model ChatBotUserSession {
  id        String   @id @default(cuid())
  chatbotId String
  chatbot   ChatBot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  sessionId String
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chatbotId, sessionId])
  @@index([chatbotId, sessionId])
}

model Passkey {
  id           String    @id
  name         String?
  publicKey    String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime?

  @@map("passkey")
}
