generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  email              String               @unique
  name               String?
  emailVerified      DateTime?
  image              String?
  rawData            Json?
  settings           Json?
  organizations      Organization[]
  Workflow           Workflow[]
  WorkflowRun        WorkflowRun[]
  OrganizationToUser OrganizationToUser[]
  SecretKey          SecretKey[]
  accounts           Account[]
  sessions           Session[]
  ChatBot            ChatBot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Organization {
  id                 String               @id
  name               String
  image_url          String?
  logo_url           String?
  rawData            Json?
  credits            Int                  @default(0)
  createdByUser      String
  createdBy          User                 @relation(fields: [createdByUser], references: [id], onDelete: Cascade)
  stripe             Stripe?
  spendLimit         Int?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  workflows          Workflow[]
  OrganizationToUser OrganizationToUser[]
  SecretKey          SecretKey[]
  UserKeys           UserKey[]
  ChatBot            ChatBot[]
}

model OrganizationToUser {
  id             Int          @id @default(autoincrement())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Stripe {
  id             Int          @id @default(autoincrement())
  customerId     String       @unique
  subscriptionId String?      @unique
  subscription   Json?
  ownerId        String       @unique
  organization   Organization @relation(fields: [ownerId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model SecretKey {
  id                 Int       @id @default(autoincrement())
  name               String?
  key                String    @unique
  rateLimitPerSecond Int       @default(10)
  createdBy          String
  ownerId            String
  lastUsed           DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user         User         @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model UserKey {
  id        String   @id
  provider  String
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ownerId   String

  organization Organization @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Workflow {
  id        Int     @id @default(autoincrement())
  shortId   String  @unique
  createdBy String
  ownerId   String
  name      String
  published Boolean @default(false)

  model           String
  modelSettings   Json?
  template        String
  instruction     String?
  inputs          Json
  cacheControlTtl Int?

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  WorkflowRun WorkflowRun[]

  organization Organization @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([ownerId])
}

model WorkflowRun {
  id              Int      @id @default(autoincrement())
  workflow        Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId      Int
  result          String
  rawRequest      Json?
  rawResult       Json?
  totalTokenCount Int      @default(0)
  createdBy       String?
  user            User?    @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model ChatBot {
  id                 String               @id @default(cuid())
  name               String
  createdBy          String
  ownerId            String
  model              String
  modelSettings      Json?
  contextItems       Json
  organization       Organization         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  user               User                 @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ChatBotUserSession ChatBotUserSession[]
}

model ChatBotUserSession {
  id        String   @id @default(cuid())
  chatbotId String
  chatbot   ChatBot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  sessionId String
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chatbotId, sessionId])
  @@index([chatbotId, sessionId])
}

// Free tools
model ImageOrder {
  id           Int      @id @default(autoincrement())
  predictionId String?  @unique
  type         String
  inputUrl     String
  inputPrompt  String?
  inputData    Json?
  outputUrl    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
