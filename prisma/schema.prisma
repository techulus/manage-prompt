generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  email              String               @unique
  rawData            Json?
  settings           Json?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  emailVerified      DateTime?
  image              String?
  name               String?
  ChatBot            ChatBot[]
  organizations      Organization[]
  OrganizationToUser OrganizationToUser[]
  SecretKey          SecretKey[]
  sessions           Session[]
  Workflow           Workflow[]
  WorkflowRun        WorkflowRun[]
  accounts           Account[]
  passkeys           Passkey[]
}

model Session {
  token     String   @unique @map("sessionToken")
  userId    String
  expiresAt DateTime @map("expires")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        String   @id @default(cuid())
  ipAddress String?
  userAgent String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id                 String               @id
  name               String
  image_url          String?
  logo_url           String?
  rawData            Json?
  credits            Int                  @default(0)
  createdByUser      String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ChatBot            ChatBot[]
  createdBy          User                 @relation(fields: [createdByUser], references: [id], onDelete: Cascade)
  OrganizationToUser OrganizationToUser[]
  SecretKey          SecretKey[]
  UserKeys           UserKey[]
  workflows          Workflow[]
}

model OrganizationToUser {
  id             Int          @id @default(autoincrement())
  organizationId String
  userId         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SecretKey {
  id                 Int          @id @default(autoincrement())
  name               String?
  key                String       @unique
  rateLimitPerSecond Int          @default(10)
  createdBy          String
  ownerId            String
  lastUsed           DateTime?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  user               User         @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  organization       Organization @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model UserKey {
  id           String       @id
  provider     String
  data         Json
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  ownerId      String
  organization Organization @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Workflow {
  id              Int              @id @default(autoincrement())
  shortId         String           @unique
  createdBy       String
  ownerId         String
  name            String
  published       Boolean          @default(false)
  model           String
  modelSettings   Json?
  template        String
  instruction     String?
  inputs          Json
  cacheControlTtl Int?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  organization    Organization     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  branches        WorkflowBranch[]
  runs            WorkflowRun[]
  tests           WorkflowTest[]

  @@index([ownerId])
}

model WorkflowBranch {
  id            Int      @id @default(autoincrement())
  shortId       String
  model         String
  modelSettings Json?
  template      String
  instruction   String?
  workflowId    Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  status        String   @default("open")
  workflow      Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([shortId, workflowId])
}

model WorkflowTest {
  id            Int          @id @default(autoincrement())
  input         Json
  output        String
  condition     String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  workflowId    Int
  status        String       @default("pending")
  workflowRunId Int?
  workflow      Workflow     @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowRun   WorkflowRun? @relation(fields: [workflowRunId], references: [id])
}

model WorkflowRun {
  id              Int            @id @default(autoincrement())
  workflowId      Int
  result          String
  rawRequest      Json?
  rawResult       Json?
  totalTokenCount Int            @default(0)
  createdBy       String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  branchId        String?
  user            User?          @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  workflow        Workflow       @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  WorkflowTest    WorkflowTest[]
}

model ChatBot {
  id                 String               @id @default(cuid())
  name               String
  createdBy          String
  ownerId            String
  model              String
  modelSettings      Json?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  contextItems       Json
  user               User                 @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  organization       Organization         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ChatBotUserSession ChatBotUserSession[]
}

model ChatBotUserSession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sessionId String
  chatbotId String
  ownerId   String
  chatbot   ChatBot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  @@unique([chatbotId, sessionId])
  @@index([chatbotId, sessionId])
}

model Passkey {
  id           String    @id
  name         String?
  publicKey    String
  userId       String
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("passkey")
}
